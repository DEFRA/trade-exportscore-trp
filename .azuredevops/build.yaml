parameters:
  - name: deployFromFeature
    displayName: "Deploy from Feature Branch"
    type: boolean
    default: false
  - name: deployToSecondary
    displayName: "Select Secondary Region"
    type: string
    default: PRD
    values:
      - None
      - DEV
      - SND
      - PRE
      - PRD
  - name: environments
    type: object
    default:
      - 'dev'
      - 'snd'
      - 'pre'
      - 'prd'

variables:
  - name: repositoryName
    value: 'trade-exportscore-trp'
  - name: acrName
    value: EXPINFCR1401

trigger:
  batch: true
  branches:
    include:
      - "*"
  paths:
    exclude:
      - infra/*

stages:
  - stage: Build
    pool:
      name: DEFRA-COMMON-ubuntu2004-SSV3
    jobs:
      - job: Build
        steps:
          - checkout: self
            clean: true
            fetchTags: false

          - task: Npm@1
            displayName: NPM Install
            inputs:
              verbose: false
                    
          - task: Npm@1
            displayName: 'npm audit'
            inputs:
              command: custom
              verbose: false
              customCommand: 'audit -audit-level=high --omit=dev' 
            continueOnError: ${{ ne(variables['Build.Reason'], 'PullRequest') }}

          - task: Npm@1
            displayName: 'npm lint'
            inputs:
              command: custom
              verbose: false
              customCommand: 'run --if-present test:lint'
            continueOnError: ${{ ne(variables['Build.Reason'], 'PullRequest') }}

          - task: Npm@1
            displayName: 'npm build'
            inputs:
              command: custom
              verbose: false
              customCommand: 'run --if-present build'

          - task: Npm@1
            displayName: 'npm unit test'
            inputs:
              command: custom
              verbose: false
              customCommand: 'run --if-present test:unit'

      - job: BuildDockerImage
        dependsOn: Build
        displayName: 'Build Docker Image'
        steps:
          - checkout: self

          - task: Docker@2
            displayName: 'Build an image'
            inputs:
              repository: $(repositoryName)
              tag: $(Build.BuildId)
              command: 'build'
              Dockerfile: './Dockerfile'

          - task: Bash@3
            displayName: Save Docker Image
            inputs:
              targetType: 'inline'
              script: |
                docker save $(repositoryName):$(Build.BuildId) -o $(Pipeline.Workspace)/docker.tar

          - task: PublishPipelineArtifact@1
            displayName: 'Publish artifact'
            inputs:
              targetPath: '$(Pipeline.Workspace)/docker.tar'
              artifact: 'dockerImage'
              publishLocation: 'pipeline'


  - ${{ each env in parameters.environments }}:
    - stage: '${{ upper(env) }}1'
      ${{ if eq(env, 'dev') }}:
        pool:
          name: 'DEFRA-COMMON-ubuntu2004-SSV3'
        dependsOn: Build
        condition: and(succeeded(), or(eq(${{ parameters.deployFromFeature }}, true), in(variables['Build.SourceBranch'], 'refs/heads/main')))
      ${{ if eq(env, 'snd') }}:
        pool:
          name: 'DEFRA-COMMON-ubuntu2004-SSV3'
        dependsOn: DEV1
        condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'), in(variables['Build.SourceBranch'], 'refs/heads/main'))
      ${{ if eq(env, 'pre') }}:
        pool:
          name: 'DEFRA-COMMON-ubuntu2004-SSV5'
        dependsOn: SND1
        condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'), in(variables['Build.SourceBranch'], 'refs/heads/main'))
      ${{ if eq(env, 'prd') }}:
        pool:
          name: 'DEFRA-COMMON-ubuntu2004-SSV5'
        dependsOn: PRE1
        condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'), in(variables['Build.SourceBranch'], 'refs/heads/main'))
      jobs:
      - deployment: '${{ upper(env) }}1'
        workspace:
          clean: all
        environment: '${{ upper(env) }}1'
        strategy:
          runOnce:
            deploy:
              steps:
              - task: DownloadPipelineArtifact@2
                displayName: 'Download Docker image' 
                inputs:
                  artifactName: 'dockerImage'
                  targetPath: '$(Pipeline.Workspace)'

              - task: Bash@3
                displayName: Load Docker Image
                inputs:
                  targetType: 'inline'
                  script: |      
                    docker load --input $(Pipeline.Workspace)/docker.tar
                    docker tag $(repositoryName):$(Build.BuildId) $(repositoryName):$(Build.BuildId)

              - task: AzurePowershell@5
                displayName: 'Push to registry'
                inputs:
                  azureSubscription: 'AZR-EXP-DEV1'
                  scriptType: 'InlineScript'
                  azurePowerShellVersion: 'latestVersion'
                  Inline: |
                    Invoke-Expression -Command "az acr login --name ${{ upper(env) }}$(acrName)"
                    Invoke-Expression -Command "docker tag $(repositoryName):$(Build.BuildId)"          
                    Invoke-Expression -Command "docker push $(repositoryName)"  

              - task: AzurePowershell@5
                displayName: 'Update container app'
                inputs:
                  azureSubscription: 'AZR-EXP-DEV1'
                  scriptType: 'InlineScript'
                  azurePowerShellVersion: 'latestVersion'
                  Inline: |
                    Invoke-Expression -Command "az containerapp update --name $(repositoryName) --resource-group DEVEXPINFRG1401 --image $(repositoryName):$(Build.BuildId)" 