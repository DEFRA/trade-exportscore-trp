parameters:
  - name: forceDevDeploy
    displayName: Force deployment to DEV
    type: boolean
    default: false
  - name: environments
    type: object
    default:
      - 'dev'
      - 'snd'
      - 'pre'
      - 'prd'
  - name: deployToSecondary
    type: string
    default: ''
  - name: azureRegions
    type: object
    default:
    - 'UKSouth'
    - 'UKWest'
  - name: appSettingsEnv
    type: object
    default: []
  - name: runSonarScan
    type: boolean
    default: true
  - name: sonarExclusionPaths
    type: string
    default: ''
  - name: appName
    type: string
stages:
- stage: Validate
  variables:
    - template: ./infra/vars/dev1.yaml
    - template: ./infra/vars/common.yaml
    - name: Environment.Name
      value: DEV
  pool:
    name: DEFRA-COMMON-ubuntu2004-SSV3
  jobs:
  - job: Build
    steps:
    - checkout: self
      clean: true
      fetchTags: false

    - task: CmdLine@2
      displayName: Install libimagequant-dev
      inputs:
        script: sudo apt install libimagequant-dev  

    - task: CmdLine@2
      displayName: Install pngquant-bin
      inputs:
        script: npm install pngquant-bin
    - ${{ if eq(parameters.runSonarScan, true) }}:
      - task: SonarCloudPrepare@2
        displayName: 'Prepare analysis on SonarCloud'
        inputs:
          SonarCloud: 'DEFRA SonarCloud'
          organization: defra
          scannerMode: 'CLI'

    - task: Npm@1
      displayName: NPM Install
      inputs:
        verbose: false

    - task: CmdLine@2
      displayName: NPM Build
      inputs:
        script: |
          npm run build
          npx jest --coverage
    - ${{ if eq(parameters.runSonarScan, true) }}:
      - task: SonarCloudAnalyze@2
        displayName: 'Run SonarCloud Code Analysis'
    - ${{ if eq(parameters.runSonarScan, true) }}:
      - task: SonarCloudPublish@2
        displayName: 'Publish Quality Gate Result'

    - task: ArchiveFiles@2
      displayName: Archive files
      inputs:
        rootFolderOrFile: $(System.DefaultWorkingDirectory)
        includeRootFolder: false
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'

- ${{ each env in parameters.environments }}:
  - stage: ${{ upper(env) }}
    pool:
      name: 'DEFRA-COMMON-ubuntu2004-SSV3'
    variables:      
      - name: secondaryRegionEnvironment
        value: ${{ parameters.deployToSecondary }}
      - template: ./infra/vars/common.yaml
      - template: ./infra/vars/${{ env }}1.yaml
      - name: applicationName
        value: '$(Environment.Name)$(serviceCodeTag)$(nc-role-backend)$(nc-resource-containerapp)$(subscriptionNumber)$(regionNumber)01'
    ${{ if eq(env, 'dev') }}:
      dependsOn: Validate
      condition: and(succeeded(), or(eq(${{ parameters.forceDevDeploy }}, true), in(variables['Build.SourceBranch'], 'refs/heads/dev', 'refs/heads/master', 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
    ${{ if eq(env, 'snd') }}:
      dependsOn: DEV
      condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'), or(in(variables['Build.SourceBranch'], 'refs/heads/dev', 'refs/heads/master', 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
    ${{ if eq(env, 'pre') }}:
      dependsOn: TST
      condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'), in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'))
    ${{ if eq(env, 'prd') }}:
      dependsOn: PRE
      condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'), in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'))
    jobs:
    - ${{ each region in parameters.azureRegions }}:
      - ${{ if or(eq(variables.primaryRegion, region), contains(lower(parameters.deployToSecondary), env), and(ne(parameters.deployToSecondary, ''), ne(lower(parameters.deployToSecondary), 'none'), eq(env, 'prd'))) }}:
        - deployment: Deploy${{ upper(env) }}_${{ region }}
          workspace:
            clean: all
          variables:
            - template: ./infra/vars/regional/${{ env }}1-${{ lower(region) }}.yaml
          environment: ${{ upper(env) }}
          strategy:
            runOnce:
              deploy:
                steps:
                - task: DownloadPipelineArtifact@2
                  displayName: Download Pipeline Artifact
                  inputs:
                    artifact: drop
                    path: $(System.DefaultWorkingDirectory)

                - task: AzureRmWebAppDeployment@4
                  displayName: 'Azure App Service Deploy: $(applicationName)'
                  inputs:
                    ConnectionType: 'AzureRM'
                    azureSubscription: "${{ variables.azureResourceManagerConnection }}"
                    WebAppKind: webAppLinux
                    WebAppName: $(applicationName)
                    RuntimeStack: NODE|18-lts
                    StartupCommand: npm run start
                    ${{ if ne(parameters.appSettings, '') }}:
                      AppSettings: ${{ parameters.appSettings }}
                    ${{ if and(ne(length(parameters.appSettingsEnv), 0), eq(env, 'dev')) }}:
                      AppSettings: ${{ parameters.appSettingsEnv.dev }}
                    ${{ if and(ne(length(parameters.appSettingsEnv), 0), eq(env, 'snd')) }}:
                      AppSettings: ${{ parameters.appSettingsEnv.snd }}
                    ${{ if and(ne(length(parameters.appSettingsEnv), 0), eq(env, 'tst')) }}:
                      AppSettings: ${{ parameters.appSettingsEnv.tst }}
                    ${{ if and(ne(length(parameters.appSettingsEnv), 0), eq(env, 'pre')) }}:
                      AppSettings: ${{ parameters.appSettingsEnv.pre }}
                    ${{ if and(ne(length(parameters.appSettingsEnv), 0), eq(env, 'prd')) }}:
                      AppSettings: ${{ parameters.appSettingsEnv.prd }}