parameters:
  - name: deployFromFeature
    displayName: "Deploy from Feature Branch"
    type: boolean
    default: false
  - name: deployToSecondary
    displayName: "Select Secondary Region"
    type: string
    default: PRD
    values:
      - None
      - DEV
      - SND
      - PRE
      - PRD
  - name: environments 
    type: object
    values:
     - DEV
     - SND
     - PRE
     - PRD


trigger:
  batch: true
  branches:
    include:
      - "*"
  paths:
    exclude:
      - infra/*

stages:
  - stage: Build
    pool:
      name: DEFRA-COMMON-ubuntu2004-SSV3
    jobs:
      - job: Build
        steps:
          - checkout: self
            clean: true
            fetchTags: false

          - task: Npm@1
            displayName: NPM Install
            inputs:
              verbose: false
                    
          - task: Npm@1
            displayName: 'npm audit'
            inputs:
              command: custom
              verbose: false
              customCommand: 'audit -audit-level=high --omit=dev' 
            continueOnError: ${{ ne(variables['Build.Reason'], 'PullRequest') }}

          - task: Npm@1
            displayName: 'npm lint'
            inputs:
              command: custom
              verbose: false
              customCommand: 'run --if-present test:lint'
            continueOnError: ${{ ne(variables['Build.Reason'], 'PullRequest') }}

          - task: Npm@1
            displayName: 'npm build'
            inputs:
              command: custom
              verbose: false
              customCommand: 'run --if-present build'

          - task: Npm@1
            displayName: 'npm unit test'
            inputs:
              command: custom
              verbose: false
              customCommand: 'run --if-present test:unit'

      - job: BuildDockerImage
        dependsOn: Build
        displayName: 'Build Docker Image'
        steps:
          - checkout: self

          - task: Docker@2
            displayName: 'Build an image'
            inputs:
              repository: 'trade-exportscore-trp'
              tag: $(Build.BuildId)
              command: 'build'
              Dockerfile: './Dockerfile'

          - task: Bash@3
            displayName: Save Docker Image
            inputs:
              targetType: 'inline'
              script: |
                docker save trade-exportscore-trp:$(Build.BuildId) -o $(Pipeline.Workspace)/trade-exportscore-trp.tar

          - task: PublishPipelineArtifact@1
            displayName: 'Publish artifact'
            inputs:
              targetPath: '$(Pipeline.Workspace)/trade-exportscore-trp.tar'
              artifact: 'dockerImage'
              publishLocation: 'pipeline'


  - ${{ each env in parameters.environments }}:
    - stage: ${{ upper(env) }}
      ${{ if eq(env, 'dev') }}:
        pool:
          name: 'DEFRA-COMMON-ubuntu2004-SSV3'
        dependsOn: Validate
        condition: and(succeeded(), or(eq(${{ parameters.forceDevDeploy }}, true), in(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
      ${{ if eq(env, 'snd') }}:
        pool:
          name: 'DEFRA-COMMON-ubuntu2004-SSV3'
        dependsOn: DEV
        condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'), or(in(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
      ${{ if eq(env, 'pre') }}:
        pool:
          name: 'DEFRA-COMMON-ubuntu2004-SSV5'
        dependsOn: SND
        condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'), in(variables['Build.SourceBranch'], 'refs/heads/main'))
      ${{ if eq(env, 'prd') }}:
        pool:
          name: 'DEFRA-COMMON-ubuntu2004-SSV5'
        dependsOn: PRE
        condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'), in(variables['Build.SourceBranch'], 'refs/heads/main'))
      jobs:
      - deployment: Deploy${{ upper(env) }}
        workspace:
          clean: all
        environment: ${{ upper(env) }}
        strategy:
          runOnce:
            deploy:
              steps:
              - task: DownloadPipelineArtifact@2
                displayName: 'Download Docker image' 
                inputs:
                  artifactName: 'dockerImage'
                  targetPath: '$(Pipeline.Workspace)'

              - task: Bash@3
                displayName: Load Docker Image
                inputs:
                  targetType: 'inline'
                  script: |      
                    docker load --input $(Pipeline.Workspace)/trade-exportscore-trp.tar
                    docker tag trade-exportscore-trp:$(Build.BuildId) trade-exportscore-trp:$(Build.BuildId)